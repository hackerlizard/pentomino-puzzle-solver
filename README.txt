README.txt

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

PentominoPuzzleSolverLite.java

This program executes the algorithm on 3 example boards of different sizes. It is the main program that shows the functionality of my algorithm. The details about the program, functions, algorithm implementation, etc can be found in report.pdf and specific explanations of the code can be found in the code comments. I recommend reading the first part of the report before looking at the code.

NOTE: I realize that it is probably not good coding practice to have everything be statics, but since this program isn’t very object-oriented, I thought it would be easier. This particular program doesn’t even use objects so it doesn’t make sense to create a new instance of the class to run the program. I just wanted to note that it was intentional in hopes of improving readability.

IMPORTANT NOTE: Consistently throughout the program, I often use y and x as variable names, iterator variables, etc. To me it was natural to use Y as the row, since it’s the  “vertical” axis, and X as the column, since it’s the “horizontal” axis. I realized however that x and y are usually used as (x,y) (with x intuitively being first). My nested for loops use y first and then x, and this is because y is the row and x is the column. It works fine but it’s not intuitive, so I wanted to point it out. 

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

PentominoPuzzleSolver.java

This program, in theory, would solve pentomino puzzles for boards of varying dimensions. The overall program is the same as PentominoPuzzleSolverLite.java, with differences noted in the comments. The longest I have run this program is about 50 minutes on a 3x20 board and I was not able to find even one solution. I think that, if it was run for long enough, it would find a solution (meaning the program itself is not broken). My future plans for optimizing this program are detailed in report.pdf

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Numbering conventions for pentomino pieces: 

In both of the programs, I give each particular pentomino “shape” a particular number. In PentominoPuzzleSolverLite.java, the pieces are referred to by their number (not by their index in the list of pieces or anything else). The piece numbers for each shape can be found here:

1:
.██...█....█...█....██.....█...█....█...
██...███...██..███...██..███..██...███..
.█.....█..██....█....█....█....██..█....
........................................
........................................
2:
█....████.██......█..█...█....██...████.
█....█.....█...████..█...████.█.......█.
█..........█.........█........█.........
██.........█........██........█.........
........................................
3:
.█...██....█...███..█.....███.█......██.
.█....███.██.....██.█....██...██...███..
██........█.........██.........█........
█.........█..........█.........█........
........................................
4:
██...███...█...██...██....██..█....███..
██....██..██...███..██...███..██...██...
█.........██.........█........██........
........................................
........................................
5:
.█.....█..█....████.█....████..█....█...
██...████.█.....█...██.....█...█...████.
.█........██........█.........██........
.█........█.........█..........█........
........................................
6:
███....█...█...█........................
.█...███...█...███......................
.█.....█..███..█........................
........................................
........................................
7:
█.█..██...███..██.......................
███..█....█.█...█.......................
.....██........██.......................
........................................
........................................
8:
█....███..███....█......................
█....█......█....█......................
███..█......█..███......................
........................................
........................................
9:
█.....██..██.....█......................
██...██....██...██......................
.██..█......█..██.......................
........................................
........................................
10:
██.....█...██..█........................
.█...███...█...███......................
.██..█....██.....█......................
........................................
........................................
11:
█....█████..............................
█.......................................
█.......................................
█.......................................
█.......................................
12:
.█......................................
███.....................................
.█......................................
........................................
........................................

Originally I was planning on inputting the pieces from a .txt so that any piece could be used in the program.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Other information:

All previous versions of the program can be found in the previous versions directory. None of these versions are fully functional, but I wanted to keep them because they show my process of debugging and error removal.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Thank you for reading!
Liz